from fastapi import APIRouter, Depends, HTTPException, status
from typing import List, Optional
from pydantic import BaseModel
from sqlalchemy.orm import Session

from database import get_db
from models import ToDo

router = APIRouter()

# -----------------
# Pydantic Schemas
# -----------------
# These are used for request validation and response serialization.
class ToDoBase(BaseModel):
    title: str
    description: Optional[str] = None
    done: bool = False

class ToDoCreate(ToDoBase):
    """Request body for creating a todo"""
    pass

class ToDoUpdate(BaseModel):
    """Partial update: all fields optional so the client may send only the fields to change."""
    title: Optional[str] = None
    description: Optional[str] = None
    done: Optional[bool] = None

class ToDoResponse(ToDoBase):
    id: int

    class Config:
        orm_mode = True  # allow reading data from ORM objects (SQLAlchemy models)

# -----------------
# CRUD Endpoints
# -----------------

@router.get("/", response_model=List[ToDoResponse])
def read_todos(db: Session = Depends(get_db)):
    """Return all todos from the database."""
    todos = db.query(ToDo).all()
    return todos


@router.post("/", response_model=ToDoResponse, status_code=status.HTTP_201_CREATED)
def create_todo(todo: ToDoCreate, db: Session = Depends(get_db)):
    """Create a new ToDo row from the validated request body."""
    new_todo = ToDo(title=todo.title, description=todo.description, done=todo.done)
    db.add(new_todo)
    db.commit()
    db.refresh(new_todo)  # populate autogenerated fields like `id`
    return new_todo


@router.get("/{todo_id}", response_model=ToDoResponse)
def read_todo(todo_id: int, db: Session = Depends(get_db)):
    """Get a single todo by id."""
    todo = db.query(ToDo).filter(ToDo.id == todo_id).first()
    if not todo:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Todo not found")
    return todo


@router.put("/{todo_id}", response_model=ToDoResponse)
def update_todo(todo_id: int, updated_todo: ToDoUpdate, db: Session = Depends(get_db)):
    """Update only fields provided by the client (partial update behavior)."""
    todo = db.query(ToDo).filter(ToDo.id == todo_id).first()
    if not todo:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Todo not found")

    # Update only provided fields
    if updated_todo.title is not None:
        todo.title = updated_todo.title
    if updated_todo.description is not None:
        todo.description = updated_todo.description
    if updated_todo.done is not None:
        todo.done = updated_todo.done

    db.commit()
    db.refresh(todo)
    return todo


@router.delete("/{todo_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_todo(todo_id: int, db: Session = Depends(get_db)):
    """Delete a todo. Returns HTTP 204 on success (no content)."""
    todo = db.query(ToDo).filter(ToDo.id == todo_id).first()
    if not todo:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Todo not found")
    db.delete(todo)
    db.commit()
    return None
